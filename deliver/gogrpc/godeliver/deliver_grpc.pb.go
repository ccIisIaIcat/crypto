// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: deliver.proto

package deliver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BarDataReceiverClient is the client API for BarDataReceiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BarDataReceiverClient interface {
	BarDataReceiver(ctx context.Context, in *BarData, opts ...grpc.CallOption) (*Response, error)
}

type barDataReceiverClient struct {
	cc grpc.ClientConnInterface
}

func NewBarDataReceiverClient(cc grpc.ClientConnInterface) BarDataReceiverClient {
	return &barDataReceiverClient{cc}
}

func (c *barDataReceiverClient) BarDataReceiver(ctx context.Context, in *BarData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/BarDataReceiver/BarDataReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BarDataReceiverServer is the server API for BarDataReceiver service.
// All implementations must embed UnimplementedBarDataReceiverServer
// for forward compatibility
type BarDataReceiverServer interface {
	BarDataReceiver(context.Context, *BarData) (*Response, error)
	mustEmbedUnimplementedBarDataReceiverServer()
}

// UnimplementedBarDataReceiverServer must be embedded to have forward compatible implementations.
type UnimplementedBarDataReceiverServer struct {
}

func (UnimplementedBarDataReceiverServer) BarDataReceiver(context.Context, *BarData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BarDataReceiver not implemented")
}
func (UnimplementedBarDataReceiverServer) mustEmbedUnimplementedBarDataReceiverServer() {}

// UnsafeBarDataReceiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BarDataReceiverServer will
// result in compilation errors.
type UnsafeBarDataReceiverServer interface {
	mustEmbedUnimplementedBarDataReceiverServer()
}

func RegisterBarDataReceiverServer(s grpc.ServiceRegistrar, srv BarDataReceiverServer) {
	s.RegisterService(&BarDataReceiver_ServiceDesc, srv)
}

func _BarDataReceiver_BarDataReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BarData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarDataReceiverServer).BarDataReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BarDataReceiver/BarDataReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarDataReceiverServer).BarDataReceiver(ctx, req.(*BarData))
	}
	return interceptor(ctx, in, info, handler)
}

// BarDataReceiver_ServiceDesc is the grpc.ServiceDesc for BarDataReceiver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BarDataReceiver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BarDataReceiver",
	HandlerType: (*BarDataReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BarDataReceiver",
			Handler:    _BarDataReceiver_BarDataReceiver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deliver.proto",
}

// TickDataReceiverClient is the client API for TickDataReceiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TickDataReceiverClient interface {
	TickDataReceiver(ctx context.Context, in *TickData, opts ...grpc.CallOption) (*Response, error)
}

type tickDataReceiverClient struct {
	cc grpc.ClientConnInterface
}

func NewTickDataReceiverClient(cc grpc.ClientConnInterface) TickDataReceiverClient {
	return &tickDataReceiverClient{cc}
}

func (c *tickDataReceiverClient) TickDataReceiver(ctx context.Context, in *TickData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/TickDataReceiver/TickDataReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TickDataReceiverServer is the server API for TickDataReceiver service.
// All implementations must embed UnimplementedTickDataReceiverServer
// for forward compatibility
type TickDataReceiverServer interface {
	TickDataReceiver(context.Context, *TickData) (*Response, error)
	mustEmbedUnimplementedTickDataReceiverServer()
}

// UnimplementedTickDataReceiverServer must be embedded to have forward compatible implementations.
type UnimplementedTickDataReceiverServer struct {
}

func (UnimplementedTickDataReceiverServer) TickDataReceiver(context.Context, *TickData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TickDataReceiver not implemented")
}
func (UnimplementedTickDataReceiverServer) mustEmbedUnimplementedTickDataReceiverServer() {}

// UnsafeTickDataReceiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TickDataReceiverServer will
// result in compilation errors.
type UnsafeTickDataReceiverServer interface {
	mustEmbedUnimplementedTickDataReceiverServer()
}

func RegisterTickDataReceiverServer(s grpc.ServiceRegistrar, srv TickDataReceiverServer) {
	s.RegisterService(&TickDataReceiver_ServiceDesc, srv)
}

func _TickDataReceiver_TickDataReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TickData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickDataReceiverServer).TickDataReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TickDataReceiver/TickDataReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickDataReceiverServer).TickDataReceiver(ctx, req.(*TickData))
	}
	return interceptor(ctx, in, info, handler)
}

// TickDataReceiver_ServiceDesc is the grpc.ServiceDesc for TickDataReceiver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TickDataReceiver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TickDataReceiver",
	HandlerType: (*TickDataReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TickDataReceiver",
			Handler:    _TickDataReceiver_TickDataReceiver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deliver.proto",
}

// OrerReceiverClient is the client API for OrerReceiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrerReceiverClient interface {
	OrerRReceiver(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Response, error)
}

type orerReceiverClient struct {
	cc grpc.ClientConnInterface
}

func NewOrerReceiverClient(cc grpc.ClientConnInterface) OrerReceiverClient {
	return &orerReceiverClient{cc}
}

func (c *orerReceiverClient) OrerRReceiver(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/OrerReceiver/OrerRReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrerReceiverServer is the server API for OrerReceiver service.
// All implementations must embed UnimplementedOrerReceiverServer
// for forward compatibility
type OrerReceiverServer interface {
	OrerRReceiver(context.Context, *Order) (*Response, error)
	mustEmbedUnimplementedOrerReceiverServer()
}

// UnimplementedOrerReceiverServer must be embedded to have forward compatible implementations.
type UnimplementedOrerReceiverServer struct {
}

func (UnimplementedOrerReceiverServer) OrerRReceiver(context.Context, *Order) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrerRReceiver not implemented")
}
func (UnimplementedOrerReceiverServer) mustEmbedUnimplementedOrerReceiverServer() {}

// UnsafeOrerReceiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrerReceiverServer will
// result in compilation errors.
type UnsafeOrerReceiverServer interface {
	mustEmbedUnimplementedOrerReceiverServer()
}

func RegisterOrerReceiverServer(s grpc.ServiceRegistrar, srv OrerReceiverServer) {
	s.RegisterService(&OrerReceiver_ServiceDesc, srv)
}

func _OrerReceiver_OrerRReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrerReceiverServer).OrerRReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrerReceiver/OrerRReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrerReceiverServer).OrerRReceiver(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

// OrerReceiver_ServiceDesc is the grpc.ServiceDesc for OrerReceiver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrerReceiver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrerReceiver",
	HandlerType: (*OrerReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrerRReceiver",
			Handler:    _OrerReceiver_OrerRReceiver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deliver.proto",
}
