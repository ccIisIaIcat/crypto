# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import deliver_pb2 as deliver__pb2


class BarDataRevicerStub(object):
    """定义bar消息接收对象
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BarDataRevicer = channel.unary_unary(
                '/BarDataRevicer/BarDataRevicer',
                request_serializer=deliver__pb2.BarData.SerializeToString,
                response_deserializer=deliver__pb2.Response.FromString,
                )


class BarDataRevicerServicer(object):
    """定义bar消息接收对象
    """

    def BarDataRevicer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BarDataRevicerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BarDataRevicer': grpc.unary_unary_rpc_method_handler(
                    servicer.BarDataRevicer,
                    request_deserializer=deliver__pb2.BarData.FromString,
                    response_serializer=deliver__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'BarDataRevicer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BarDataRevicer(object):
    """定义bar消息接收对象
    """

    @staticmethod
    def BarDataRevicer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BarDataRevicer/BarDataRevicer',
            deliver__pb2.BarData.SerializeToString,
            deliver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TickDataRevicerStub(object):
    """定义tick消息接收对象
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TickDataRevicer = channel.unary_unary(
                '/TickDataRevicer/TickDataRevicer',
                request_serializer=deliver__pb2.TickData.SerializeToString,
                response_deserializer=deliver__pb2.Response.FromString,
                )


class TickDataRevicerServicer(object):
    """定义tick消息接收对象
    """

    def TickDataRevicer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TickDataRevicerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TickDataRevicer': grpc.unary_unary_rpc_method_handler(
                    servicer.TickDataRevicer,
                    request_deserializer=deliver__pb2.TickData.FromString,
                    response_serializer=deliver__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TickDataRevicer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TickDataRevicer(object):
    """定义tick消息接收对象
    """

    @staticmethod
    def TickDataRevicer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TickDataRevicer/TickDataRevicer',
            deliver__pb2.TickData.SerializeToString,
            deliver__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
